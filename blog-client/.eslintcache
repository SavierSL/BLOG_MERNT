[{"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\index.tsx":"1","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\App.tsx":"2","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\FrontPage.tsx":"3","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\rootReducers.ts":"4","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\store.ts":"5","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\sagas\\sagas.ts":"6","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\types.ts":"7","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\logIn.ts":"8","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\post.ts":"9","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\RegisterPage.tsx":"10","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\register.ts":"11","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\HomePage.tsx":"12","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\light.ts":"13","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\styles.ts":"14","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\dark.ts":"15","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\types.ts":"16","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\alert\\Alert.tsx":"17","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\getTheme.ts":"18","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\alert.ts":"19","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\index.ts":"20","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\blogPost.ts":"21","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\BlogPosts.tsx":"22","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\blogPosts.ts":"23","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\users.ts":"24","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\user.ts":"25"},{"size":229,"mtime":1611572734403,"results":"26","hashOfConfig":"27"},{"size":1855,"mtime":1612156962300,"results":"28","hashOfConfig":"27"},{"size":2861,"mtime":1612156566107,"results":"29","hashOfConfig":"27"},{"size":262,"mtime":1611983274553,"results":"30","hashOfConfig":"27"},{"size":520,"mtime":1611313811890,"results":"31","hashOfConfig":"27"},{"size":7985,"mtime":1612148152146,"results":"32","hashOfConfig":"27"},{"size":1245,"mtime":1612146942476,"results":"33","hashOfConfig":"27"},{"size":297,"mtime":1611314361495,"results":"34","hashOfConfig":"35"},{"size":1391,"mtime":1612146604371,"results":"36","hashOfConfig":"27"},{"size":3499,"mtime":1611747020127,"results":"37","hashOfConfig":"27"},{"size":237,"mtime":1611555814741,"results":"38","hashOfConfig":"27"},{"size":5747,"mtime":1612158328360,"results":"39","hashOfConfig":"27"},{"size":237,"mtime":1612157068408,"results":"40","hashOfConfig":"27"},{"size":326,"mtime":1612160084632,"results":"41","hashOfConfig":"27"},{"size":238,"mtime":1611629077200,"results":"42","hashOfConfig":"27"},{"size":65,"mtime":1611587269005,"results":"43","hashOfConfig":"27"},{"size":506,"mtime":1611749758928,"results":"44","hashOfConfig":"27"},{"size":290,"mtime":1612177058538,"results":"45","hashOfConfig":"27"},{"size":187,"mtime":1611640997684,"results":"46","hashOfConfig":"27"},{"size":85,"mtime":1611586625214,"results":"47","hashOfConfig":"27"},{"size":497,"mtime":1611807726393,"results":"48","hashOfConfig":"27"},{"size":2819,"mtime":1612196890675,"results":"49","hashOfConfig":"27"},{"size":737,"mtime":1612146737070,"results":"50","hashOfConfig":"27"},{"size":629,"mtime":1612147515283,"results":"51","hashOfConfig":"27"},{"size":1241,"mtime":1612148292915,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"qf0wnc",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"18gkpjn",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\index.tsx",[],["110","111"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\App.tsx",[],["112","113"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\FrontPage.tsx",["114"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logInAction } from \"../redux/actions/logIn\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport Alert from \"./alert/Alert\";\r\nimport { removeAlertAction } from \"../redux/actions/alert\";\r\nimport { getAllPost } from \"../redux/actions/blogPost\";\r\n\r\nexport interface FrontPageProps {\r\n  theme: any;\r\n}\r\ninterface logInState {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst FrontPage: React.FC<FrontPageProps> = ({ theme }) => {\r\n  const error = useSelector((state: any) => state.post.msg);\r\n  const isAuth = useSelector((state: any) => state.post.isAuth);\r\n  console.log(theme);\r\n  const [logInInput, setLogInInput] = useState<logInState>({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  useEffect(() => {\r\n    dispatch(getAllPost());\r\n  }, []);\r\n  const dispatch = useDispatch();\r\n  const handleInput = (e: any) => {\r\n    e.preventDefault();\r\n    dispatch(removeAlertAction());\r\n    setLogInInput({ ...logInInput, [e.target.name]: e.target.value });\r\n  };\r\n  const { email, password } = logInInput;\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    console.log(\"submitted\");\r\n    dispatch(logInAction(email, password));\r\n  };\r\n  console.log(logInInput);\r\n  if (isAuth === true) {\r\n    return <Redirect to=\"/home\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"frontPageContainer\">\r\n        <div className=\"frontPage\">\r\n          <div className=\"frontPage_content\">\r\n            <h1 className=\"primary-heading\">BLOG IT</h1>\r\n            <h1 className=\"primary-heading\">LOG IN</h1>\r\n            <div className=\"frontPage_form\">\r\n              <Alert error={error} />\r\n              <form\r\n                className=\"primary-form\"\r\n                action=\"\"\r\n                onSubmit={(e) => handleSubmit(e)}\r\n              >\r\n                <input\r\n                  className=\"primary-form_primary-input\"\r\n                  placeholder=\"email\"\r\n                  onChange={(e) => handleInput(e)}\r\n                  name=\"email\"\r\n                  type=\"text\"\r\n                  value={logInInput.email}\r\n                />\r\n                <input\r\n                  className=\"primary-form_primary-input\"\r\n                  placeholder=\"password\"\r\n                  onChange={(e) => handleInput(e)}\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={logInInput.password}\r\n                />\r\n                <button className=\"primary-form_primary-button\">LOG IN</button>\r\n              </form>\r\n              <h2>\r\n                <NavLink to=\"/register\">Register</NavLink>\r\n              </h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"frontPage2\"></div>{\" \"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FrontPage;\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\rootReducers.ts",[],["115","116"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\store.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\sagas\\sagas.ts",["117"],"import { all, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport * as type from \"../actions/types\";\r\nconst port = \"http://localhost:5000\";\r\n//login\r\nconst logInData = async (email: string, password: string) => {\r\n  const body = { email, password };\r\n  console.log(body);\r\n  const token = await fetch(`${port}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(body),\r\n  })\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  return token;\r\n};\r\nfunction* logInSaga(action: any) {\r\n  const { email, password } = action.payload;\r\n  try {\r\n    const res = yield logInData(email, password);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.LOG_IN_FAILED, payload: res });\r\n    }\r\n    console.log(res);\r\n    return yield put({ type: type.LOG_IN_SUCCESS, payload: res.token });\r\n  } catch (error) {\r\n    yield put({ type: type.LOG_IN_FAILED, payload: error });\r\n  }\r\n}\r\n\r\nfunction* watchLogInSaga() {\r\n  yield takeEvery(type.LOG_IN_SAGA, logInSaga);\r\n}\r\n\r\n//register\r\nconst registerData = async (name: string, email: string, password: string) => {\r\n  const body = { name, email, password };\r\n  const content = {\r\n    method: \"POST\",\r\n    headers: { \"Content-type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n  };\r\n  const token = await fetch(`${port}/users/register`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(token);\r\n  return token;\r\n};\r\nfunction* registerDataSaga(action: any) {\r\n  const { name, email, password } = action.payload;\r\n  try {\r\n    const res = yield registerData(name, email, password);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.REGISTER_FAILED, payload: res });\r\n    }\r\n    return yield put({ type: type.REGISTER_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    yield put({ type: type.REGISTER_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchrRgisterDataSaga() {\r\n  yield takeEvery(type.REGISTER_SAGA, registerDataSaga);\r\n}\r\n\r\n//BLOG POST\r\nconst blogPostData = async (\r\n  title: string,\r\n  blogContent: string,\r\n  img: File,\r\n  token: string,\r\n  imgType: string\r\n) => {\r\n  console.log(img);\r\n  const body = { title, blogContent, img, imgType };\r\n  const content = {\r\n    method: \"POST\",\r\n    headers: { \"x-auth-token\": token, \"Content-type\": \"application/json\" },\r\n    body: JSON.stringify(body),\r\n  };\r\n  const data = await fetch(`${port}/post/blog-post`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(data);\r\n  return data;\r\n};\r\nfunction* blogPostSaga(action: any) {\r\n  const { title, blogContent, img, token, imgType } = action.payload;\r\n  try {\r\n    const res = yield blogPostData(title, blogContent, img, token, imgType);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.BLOGPOST_FAILED, payload: res });\r\n    }\r\n\r\n    const ecodeDataToImage = () => {\r\n      if (res) {\r\n        const converToBase64 = (img: any) => {\r\n          const buffit = Buffer.from(img);\r\n          res.image = `${buffit}`;\r\n        };\r\n        converToBase64(res.img);\r\n      }\r\n    };\r\n    ecodeDataToImage();\r\n    yield put({ type: type.NEW_USER_POST_SUCCESS, payload: res });\r\n    return yield put({ type: type.BLOGPOST_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.BLOGPOST_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchBlogPostSaga() {\r\n  yield takeEvery(type.BLOGPOST_SAGA, blogPostSaga);\r\n}\r\n\r\n// //NEW USER POST\r\n// function* newUserPost(action: any) {\r\n//   const { blogPost } = action.payload;\r\n\r\n//   try {\r\n//     yield put({ type: type.NEW_USER_POST_SUCCESS, payload: blogPost });\r\n//   } catch (error) {\r\n//     yield put({ type: type.NEW_USER_POST_FAILED, payload: error });\r\n//   }\r\n// }\r\n// function* watchNewUserPostSaga() {\r\n//   yield takeEvery(type.NEW_USER_POST_SAGA, newUserPost);\r\n// }\r\n\r\n//GET ALL POST\r\nconst getAllPost = async () => {\r\n  const content = { method: \"GET\" };\r\n  const data = await fetch(`${port}/post/blog-posts`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getAllPostSaga() {\r\n  try {\r\n    const res = yield getAllPost();\r\n    let newPosts: any[] = [];\r\n    const encodeDataToImage = () => {\r\n      newPosts = res.map((post: any) => {\r\n        if (res.length !== 0) {\r\n          const convertToBase64 = (image: any) => {\r\n            const buffit = Buffer.from(image);\r\n            post.image = `${buffit}`;\r\n          };\r\n          convertToBase64(post.img.data);\r\n          return post;\r\n        }\r\n      });\r\n    };\r\n    encodeDataToImage();\r\n\r\n    return yield put({ type: type.GET_ALL_POST_SUCCESS, payload: newPosts });\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\nfunction* watchGetAllPostSaga() {\r\n  yield takeLatest(type.GET_ALL_POST_SAGA, getAllPostSaga);\r\n}\r\n\r\nconst getUserData = async (token: string) => {\r\n  console.log(token);\r\n  const content = {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/users/get-user`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\n\r\nfunction* getUserSaga(action: any) {\r\n  const { token } = action.payload;\r\n  console.log(token);\r\n  try {\r\n    const res = yield getUserData(token);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.GET_USER_FAILED, payload: res });\r\n    }\r\n    return yield put({ type: type.GET_USER_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.GET_USER_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchGetUserSaga() {\r\n  yield takeEvery(type.GET_USER_SAGA, getUserSaga);\r\n}\r\n\r\nfunction* removeAlertSaga() {\r\n  yield put({ type: type.ALERT_SAGA_REMOVE });\r\n}\r\nfunction* watchRemoveAlertSaga() {\r\n  yield takeEvery(type.ALERT_SAGA, removeAlertSaga);\r\n}\r\n\r\n//GET USER POSTS\r\nconst getUserPosts = async (token: string) => {\r\n  const content = {\r\n    mthod: \"GET\",\r\n    headers: {\r\n      \"x-auth-token\": token,\r\n    },\r\n  };\r\n  const data = await fetch(`${port}/users/user-posts`, content)\r\n    .then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n  return data;\r\n};\r\nfunction* getUserPostsSaga(action: any) {\r\n  const { token } = action.payload;\r\n  try {\r\n    const res = yield getUserPosts(token);\r\n    if (res.hasOwnProperty(\"msg\")) {\r\n      return yield put({ type: type.GET_USER_POSTS_FAILED, payload: res });\r\n    }\r\n    // let newPosts: any[] = [];\r\n    // const encodeDataToImage = () => {\r\n    //   newPosts = res.map((post: any) => {\r\n    //     if (res.length !== 0) {\r\n    //       const convertToBase64 = (image: any) => {\r\n    //         const buffit = Buffer.from(image);\r\n    //         post.image = `${buffit}`;\r\n    //       };\r\n    //       convertToBase64(post.img.data);\r\n    //       return post;\r\n    //     }\r\n    //   });\r\n    // };\r\n    // encodeDataToImage();\r\n    yield put({ type: type.GET_USER_POSTS_SUCCESS, payload: res });\r\n  } catch (error) {\r\n    return yield put({ type: type.GET_USER_POSTS_FAILED, payload: error });\r\n  }\r\n}\r\nfunction* watchGetUserPostsSaga() {\r\n  yield takeEvery(type.GET_USER_POSTS_SAGA, getUserPostsSaga);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchLogInSaga(),\r\n    watchrRgisterDataSaga(),\r\n    watchRemoveAlertSaga(),\r\n    watchBlogPostSaga(),\r\n    watchGetAllPostSaga(),\r\n    watchGetUserSaga(),\r\n    watchGetUserPostsSaga(),\r\n  ]);\r\n}\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\types.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\logIn.ts",[],["118","119"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\post.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\RegisterPage.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\register.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\HomePage.tsx",["120","121","122","123","124"],"import { FilePond, registerPlugin } from \"react-filepond\";\r\n\r\nimport \"filepond/dist/filepond.min.css\";\r\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\r\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\r\nimport FilePondPluginFileEncode from \"filepond-plugin-file-encode\";\r\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\r\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { blogPostAction, getAllPost } from \"../redux/actions/blogPost\";\r\nimport { NavLink, Redirect } from \"react-router-dom\";\r\nimport {\r\n  getUserAction,\r\n  getUserPostsAction,\r\n  newPostUserAction,\r\n} from \"../redux/actions/users\";\r\n\r\nexport interface HomePageProps {\r\n  theme: string;\r\n}\r\nexport interface BlogPost {\r\n  title: string;\r\n  blogContent: string;\r\n  img: unknown | null | string;\r\n  imgType: string;\r\n}\r\nregisterPlugin(\r\n  FilePondPluginImageExifOrientation,\r\n  FilePondPluginImagePreview,\r\n  FilePondPluginFileEncode,\r\n  FilePondPluginImageResize\r\n);\r\n\r\nconst HomePage: React.FC<HomePageProps> = ({ theme }) => {\r\n  const dispatch = useDispatch();\r\n  const token = useSelector((state: any) => state.post.token);\r\n  const user = useSelector((state: any) => state.user.user);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [file, setFiles] = useState([]);\r\n  const posts = useSelector((state: any) => state.user.posts);\r\n  const loading = useSelector((state: any) => state.user.loadingPosts);\r\n  const [blogPost, setBlogPost] = useState<BlogPost>({\r\n    title: \"\",\r\n    blogContent: \"\",\r\n    img: null,\r\n    imgType: \"\",\r\n  });\r\n  useEffect(() => {\r\n    dispatch(getUserAction(token));\r\n    dispatch(getUserPostsAction(token));\r\n  }, [token, dispatch]);\r\n  const { title, blogContent, img, imgType } = blogPost;\r\n  const handleUpdateFIle = (file: any) => {\r\n    setFiles(\r\n      file.map((files: any) => {\r\n        const file = files.file;\r\n        setBlogPost({ ...blogPost, imgType: file.type });\r\n        return file;\r\n      })\r\n    );\r\n  };\r\n  console.log(blogPost.imgType);\r\n\r\n  const handleSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    dispatch(blogPostAction(title, blogContent, img, token, imgType));\r\n\r\n    console.log(blogPost);\r\n  };\r\n  const toBase64 = (file: any) =>\r\n    new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n\r\n      if (file.length === 1) {\r\n        reader.readAsDataURL(file[0]);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = (error) => reject(error);\r\n      }\r\n      return reader;\r\n    });\r\n  let updatedImage: string | unknown;\r\n  const newImage = toBase64(file);\r\n  const dataImage = async () => {\r\n    const newData = await newImage;\r\n    updatedImage = newData;\r\n    return newData;\r\n  };\r\n  dataImage();\r\n  const handleInput = (e: any) => {\r\n    e.preventDefault();\r\n    setBlogPost({\r\n      ...blogPost,\r\n      [e.target.name]: e.target.value,\r\n      img: updatedImage,\r\n    });\r\n  };\r\n  const styleThemeT = {\r\n    color: theme === \"LIGHT\" ? \"#fff\" : \"#000\",\r\n  };\r\n  const styleThemeB = {\r\n    background: theme === \"LIGHT\" ? \"#000\" : \"#fff\",\r\n  };\r\n  const styleThemeBMain = {\r\n    background: theme === \"LIGHT\" ? \"#fff\" : \"none\",\r\n  };\r\n  const userPosts = posts.map((post: any) => {\r\n    // return <img style={{ height: \"20rem\" }} src={post.image} alt=\"\" />;\r\n\r\n    return (\r\n      <div style={styleThemeB} className=\"homeBlogContainer_blogs\">\r\n        <p style={styleThemeT}>{post.title}</p>\r\n        <p style={styleThemeT}>{post.date}</p>\r\n      </div>\r\n    );\r\n  });\r\n  const ifLoading = loading ? <h1>Getting Blog Datas</h1> : userPosts;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"homePage\">\r\n        <h1 className=\"primary-heading\">BLOG IT</h1>\r\n        <h1 className=\"primary-heading\">{user.name}</h1>\r\n        <div>\r\n          <span>{user.email}</span>\r\n        </div>\r\n        <div style={styleThemeBMain} className=\"homeBlogContainer\">\r\n          {ifLoading}\r\n        </div>\r\n\r\n        <div className=\"homePage_content\">\r\n          <div\r\n            className=\"homePage_createBlogContainer\"\r\n            // style={{ display: \"none\" }}\r\n          >\r\n            <FilePond\r\n              files={file}\r\n              onupdatefiles={(file) => handleUpdateFIle(file)}\r\n              maxFiles={3}\r\n              name=\"files\"\r\n              labelIdle='Drag  Drop your files or <span class=\"filepond--label-action\">Browse</span>'\r\n            />\r\n            <div className=\"frontPage_form\">\r\n              <form\r\n                className=\"primary-form\"\r\n                action=\"\"\r\n                onSubmit={(e) => handleSubmit(e)}\r\n              >\r\n                <input\r\n                  className=\"primary-form_primary-input\"\r\n                  placeholder=\"title\"\r\n                  onChange={(e) => handleInput(e)}\r\n                  style={{ width: \"80%\" }}\r\n                  name=\"title\"\r\n                  type=\"text\"\r\n                  value={blogPost.title}\r\n                />\r\n                <textarea\r\n                  className=\"primary-form_primary-input\"\r\n                  placeholder=\"Caption\"\r\n                  style={{ width: \"100%\", height: \"20rem\" }}\r\n                  onChange={(e) => handleInput(e)}\r\n                  name=\"blogContent\"\r\n                  value={blogPost.blogContent}\r\n                />\r\n              </form>\r\n            </div>\r\n            <button onClick={(e) => handleSubmit(e)}>Submit</button>\r\n            <NavLink to=\"/blog-posts\">blogpostsss</NavLink>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\light.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\styles.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\dark.ts",["125"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\types.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\alert\\Alert.tsx",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\getTheme.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\alert.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\theme\\themes\\index.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\blogPost.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\components\\BlogPosts.tsx",["126","127","128","129","130"],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\blogPosts.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\actions\\users.ts",[],"C:\\Users\\User\\Documents\\BLOGAPP-MERNT-master\\blog-client\\src\\redux\\reducers\\user.ts",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"131","replacedBy":"135"},{"ruleId":"133","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":27,"column":6,"nodeType":"139","endLine":27,"endColumn":8,"suggestions":"140"},{"ruleId":"131","replacedBy":"141"},{"ruleId":"133","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":164,"column":38,"nodeType":"145","messageId":"146","endLine":164,"endColumn":40},{"ruleId":"131","replacedBy":"147"},{"ruleId":"133","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":12,"column":26,"nodeType":"151","messageId":"152","endLine":12,"endColumn":36},{"ruleId":"149","severity":1,"message":"153","line":13,"column":19,"nodeType":"151","messageId":"152","endLine":13,"endColumn":27},{"ruleId":"149","severity":1,"message":"154","line":17,"column":3,"nodeType":"151","messageId":"152","endLine":17,"endColumn":20},{"ruleId":"149","severity":1,"message":"155","line":40,"column":10,"nodeType":"151","messageId":"152","endLine":40,"endColumn":19},{"ruleId":"149","severity":1,"message":"156","line":40,"column":21,"nodeType":"151","messageId":"152","endLine":40,"endColumn":33},{"ruleId":"149","severity":1,"message":"157","line":1,"column":10,"nodeType":"151","messageId":"152","endLine":1,"endColumn":26},{"ruleId":"149","severity":1,"message":"158","line":1,"column":21,"nodeType":"151","messageId":"152","endLine":1,"endColumn":29},{"ruleId":"149","severity":1,"message":"153","line":4,"column":19,"nodeType":"151","messageId":"152","endLine":4,"endColumn":27},{"ruleId":"149","severity":1,"message":"159","line":5,"column":8,"nodeType":"151","messageId":"152","endLine":5,"endColumn":16},{"ruleId":"149","severity":1,"message":"160","line":12,"column":9,"nodeType":"151","messageId":"152","endLine":12,"endColumn":14},{"ruleId":"137","severity":1,"message":"161","line":22,"column":6,"nodeType":"139","endLine":22,"endColumn":8,"suggestions":"162"},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["165"],["163"],["164"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["163"],["164"],"@typescript-eslint/no-unused-vars","'getAllPost' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'newPostUserAction' is defined but never used.","'submitted' is assigned a value but never used.","'setSubmitted' is assigned a value but never used.","'isWhiteSpaceLike' is defined but never used.","'useState' is defined but never used.","'blogPost' is defined but never used.","'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'loading'. Either include them or remove the dependency array.",["166"],"no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [dispatch]",{"range":"171","text":"172"},"Update the dependencies array to be: [dispatch, loading]",{"range":"173","text":"174"},[869,871],"[dispatch]",[785,787],"[dispatch, loading]"]